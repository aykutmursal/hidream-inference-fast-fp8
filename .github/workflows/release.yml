name: Release
on:
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Which model to build & push'
        required: true
        default: 'fast-fp8'
        type: choice
        options:
          - fast-fp8
  push:
    branches: [ main ]
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
    # =============  INITIAL DISK SPACE CHECK  =============
    - name: Check initial disk space
      run: df -h
      
    # =============  AGGRESSIVE DISK CLEANUP  =============
    - name: Free up disk space (aggressive cleanup)
      run: |
        echo "Starting aggressive disk cleanup..."
        # Remove large unused directories
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf "/usr/local/share/boost"
        
        # Clean Docker images and build cache
        sudo docker image prune --all --force
        sudo docker builder prune --all --force
        sudo docker system prune --all --force
        
        # Clean package managers and temporary files
        sudo apt-get clean
        sudo apt-get autoremove -y
        sudo rm -rf /var/lib/apt/lists/*
        
        echo "Cleanup completed."
        
    - name: Check disk space after cleanup
      run: df -h

    # =============  SETUP  =============
    - name: Checkout
      uses: actions/checkout@v3
      with:
        persist-credentials: false
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        echo "Installing Python dependencies..."
        python -m pip install -r requirements.txt
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    # =============  MANUAL VERSION SETTING  =============
    # Since semantic-release is having issues, let's just set a version manually
    - name: Set release version
      id: set_version
      run: |
        # Get current date in YYYY.MM.DD format
        CURRENT_DATE=$(date +'%Y.%m.%d')
        # Append build number for uniqueness
        VERSION="${CURRENT_DATE}.${GITHUB_RUN_NUMBER}"
        echo "Setting release version to: $VERSION"
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "release-version=$VERSION" >> $GITHUB_OUTPUT
    
    # README varsa ToC gÃ¼ncelle; yoksa atla
    - name: Update the ToC in the README.md
      if: hashFiles('README.md') != ''
      run: |
        echo "Updating README.md table of contents..."
        npm install markdown-toc
        npx markdown-toc README.md -i || echo "Table of contents update failed, but continuing..."
    
    # =============  ENV VARS =============
    - name: Set environment variables
      run: |
        echo "Setting environment variables..."
        echo "DOCKERHUB_REPO=${{ vars.DOCKERHUB_REPO || 'aykutmursalo' }}" >> $GITHUB_ENV
        echo "DOCKERHUB_IMG=${{ vars.DOCKERHUB_IMG || 'hidream-inference-fast-fp8' }}" >> $GITHUB_ENV
        echo "HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }}" >> $GITHUB_ENV
        # Version already set in previous step
    
    # Check disk space before build
    - name: Check disk space before build
      run: df -h
    
    # =============  DEBUG DOCKER CONFIGURATION  =============
    - name: Debug Docker configuration
      run: |
        docker info
        docker buildx ls
        echo "Docker Hub repo: ${{ env.DOCKERHUB_REPO }}"
        echo "Docker Hub image: ${{ env.DOCKERHUB_IMG }}"
        echo "Release version: ${{ env.RELEASE_VERSION }}"
      
    # =============  BUILD & PUSH  =============
    - name: Build and push the fast-fp8 image
      uses: docker/bake-action@v2
      with:
        push: true
        targets: "fast-fp8"
        set: |
          fast-fp8.tags=${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMG }}:${{ env.RELEASE_VERSION }}-fast-fp8
          fast-fp8.args.DOCKERHUB_REPO=${{ env.DOCKERHUB_REPO }}
          fast-fp8.args.DOCKERHUB_IMG=${{ env.DOCKERHUB_IMG }}
          fast-fp8.args.RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          fast-fp8.args.HUGGINGFACE_ACCESS_TOKEN=${{ env.HUGGINGFACE_ACCESS_TOKEN }}
    
    # Final disk space check
    - name: Check final disk space
      run: df -h